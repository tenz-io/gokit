// Code generated by github.com/tenz-io/gokit/protoc-gen-go-validator. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	genproto "github.com/tenz-io/gokit/genproto"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/tenz-io/gokit/protoc-gen-go-validator package it is being compiled against.
// fmt.
// genproto.
// strings.

func init() {
	fmt.Sprint("")
	genproto.IsNilOrEmpty(nil)
	strings.TrimSpace("")
}

func (x *LoginRequest) Validate() error {

	if err := x.validateUsername(); err != nil {
		return err
	}

	if err := x.validatePassword(); err != nil {
		return err
	}

	return nil
}

func (x *LoginRequest) validateUsername() error {

	if strings.TrimSpace(x.GetUsername()) == "" {
		return &genproto.ValidationError{
			Key:     "Username",
			Message: "can not be blank",
		}
	}

	if len(x.GetUsername()) < 1 {
		return &genproto.ValidationError{
			Key:     "Username",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	if len(x.GetUsername()) > 2 {
		return &genproto.ValidationError{
			Key:     "Username",
			Message: fmt.Sprintf("must be at most %d characters long", 2),
		}
	}

	return nil
}

func (x *LoginRequest) validatePassword() error {

	if strings.TrimSpace(x.GetPassword()) == "" {
		return &genproto.ValidationError{
			Key:     "Password",
			Message: "can not be blank",
		}
	}

	if len(x.GetPassword()) < 1 {
		return &genproto.ValidationError{
			Key:     "Password",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	if len(x.GetPassword()) > 6 {
		return &genproto.ValidationError{
			Key:     "Password",
			Message: fmt.Sprintf("must be at most %d characters long", 6),
		}
	}

	return nil
}

func (x *LoginResponse) Validate() error {

	if err := x.validateAccessToken(); err != nil {
		return err
	}

	if err := x.validateRefreshToken(); err != nil {
		return err
	}

	return nil
}

func (x *LoginResponse) validateAccessToken() error {

	return nil
}

func (x *LoginResponse) validateRefreshToken() error {

	return nil
}

func (x *HelloRequest) Validate() error {

	if err := x.validateName(); err != nil {
		return err
	}

	return nil
}

func (x *HelloRequest) validateName() error {

	if strings.TrimSpace(x.GetName()) == "" {
		return &genproto.ValidationError{
			Key:     "Name",
			Message: "can not be blank",
		}
	}

	if len(x.GetName()) < 1 {
		return &genproto.ValidationError{
			Key:     "Name",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	if len(x.GetName()) > 2 {
		return &genproto.ValidationError{
			Key:     "Name",
			Message: fmt.Sprintf("must be at most %d characters long", 2),
		}
	}

	return nil
}

func (x *HelloResponse) Validate() error {

	if err := x.validateMessage(); err != nil {
		return err
	}

	return nil
}

func (x *HelloResponse) validateMessage() error {

	return nil
}

func (x *GetImageRequest) Validate() error {

	if err := x.validateKey(); err != nil {
		return err
	}

	if err := x.validateWidth(); err != nil {
		return err
	}

	if err := x.validateHeight(); err != nil {
		return err
	}

	return nil
}

func (x *GetImageRequest) validateKey() error {

	if strings.TrimSpace(x.GetKey()) == "" {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: "can not be blank",
		}
	}

	if len(x.GetKey()) < 1 {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	return nil
}

func (x *GetImageRequest) validateWidth() error {

	if genproto.IsNilOrEmpty(x.Width) {
		return &genproto.ValidationError{
			Key:     "Width",
			Message: "is required",
		}
	}

	if x.GetWidth() < 0 {
		return &genproto.ValidationError{
			Key:     "Width",
			Message: fmt.Sprintf("must be greater than or equal to %d", 0),
		}
	}

	if x.GetWidth() != 1024 {
		return &genproto.ValidationError{
			Key:     "Width",
			Message: fmt.Sprintf("must be equal to %d", 1024),
		}
	}

	return nil
}

func (x *GetImageRequest) validateHeight() error {

	if genproto.IsNilOrEmpty(x.Height) {
		return &genproto.ValidationError{
			Key:     "Height",
			Message: "is required",
		}
	}

	if x.GetHeight() < 0 {
		return &genproto.ValidationError{
			Key:     "Height",
			Message: fmt.Sprintf("must be greater than or equal to %d", 0),
		}
	}

	if x.GetHeight() != 1024 {
		return &genproto.ValidationError{
			Key:     "Height",
			Message: fmt.Sprintf("must be equal to %d", 1024),
		}
	}

	return nil
}

func (x *GetImageResponse) Validate() error {

	if err := x.validateFile(); err != nil {
		return err
	}

	return nil
}

func (x *GetImageResponse) validateFile() error {

	return nil
}

func (x *UploadImageRequest) Validate() error {

	if err := x.validateImage(); err != nil {
		return err
	}

	if err := x.validateCategory(); err != nil {
		return err
	}

	return nil
}

func (x *UploadImageRequest) validateImage() error {

	if genproto.IsNilOrEmpty(x.Image) {
		return &genproto.ValidationError{
			Key:     "Image",
			Message: "is required",
		}
	}

	if len(x.GetImage()) < 1 {
		return &genproto.ValidationError{
			Key:     "Image",
			Message: fmt.Sprintf("must be at least %d bytes long", 1),
		}
	}

	if len(x.GetImage()) > 1048576 {
		return &genproto.ValidationError{
			Key:     "Image",
			Message: fmt.Sprintf("must be at most %d bytes long", 1048576),
		}
	}

	return nil
}

func (x *UploadImageRequest) validateCategory() error {

	if strings.TrimSpace(x.GetCategory()) == "" {
		return &genproto.ValidationError{
			Key:     "Category",
			Message: "can not be blank",
		}
	}

	if len(x.GetCategory()) < 1 {
		return &genproto.ValidationError{
			Key:     "Category",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	notInList := []string{"avatar", "background", "post"}
	if genproto.StringIn(x.GetCategory(), notInList) {
		return &genproto.ValidationError{
			Key:     "Category",
			Message: fmt.Sprintf("must not be one of %v", notInList),
		}
	}

	return nil
}

func (x *UploadImageResponse) Validate() error {

	if err := x.validateKey(); err != nil {
		return err
	}

	return nil
}

func (x *UploadImageResponse) validateKey() error {

	return nil
}

func (x *UpdateProgressRequest) Validate() error {

	if err := x.validateProgress(); err != nil {
		return err
	}

	if err := x.validateCatIds(); err != nil {
		return err
	}

	return nil
}

func (x *UpdateProgressRequest) validateProgress() error {

	if x.GetProgress() >= 0 {
		return &genproto.ValidationError{
			Key:     "Progress",
			Message: fmt.Sprintf("must be less than %f", 0),
		}
	}

	return nil
}

func (x *UpdateProgressRequest) validateCatIds() error {

	if genproto.IsNilOrEmpty(x.CatIds) {
		return &genproto.ValidationError{
			Key:     "CatIds",
			Message: "is required",
		}
	}

	if len(x.GetCatIds()) < 1 {
		return &genproto.ValidationError{
			Key:     "CatIds",
			Message: fmt.Sprintf("must have at least %d items", 1),
		}
	}

	if len(x.GetCatIds()) > 10 {
		return &genproto.ValidationError{
			Key:     "CatIds",
			Message: fmt.Sprintf("must have at most %d items", 10),
		}
	}

	return nil
}

func (x *UpdateProgressResponse) Validate() error {

	if err := x.validateProgress(); err != nil {
		return err
	}

	return nil
}

func (x *UpdateProgressResponse) validateProgress() error {

	return nil
}

func (x *QueryRequest) Validate() error {

	if err := x.validatePage(); err != nil {
		return err
	}

	if err := x.validatePageSize(); err != nil {
		return err
	}

	if err := x.validateMatch(); err != nil {
		return err
	}

	return nil
}

func (x *QueryRequest) validatePage() error {

	if genproto.IsNilOrEmpty(x.Page) {
		return &genproto.ValidationError{
			Key:     "Page",
			Message: "is required",
		}
	}

	if x.GetPage() < 0 {
		return &genproto.ValidationError{
			Key:     "Page",
			Message: fmt.Sprintf("must be greater than or equal to %d", 0),
		}
	}

	return nil
}

func (x *QueryRequest) validatePageSize() error {

	if genproto.IsNilOrEmpty(x.PageSize) {
		return &genproto.ValidationError{
			Key:     "PageSize",
			Message: "is required",
		}
	}

	if x.GetPageSize() < 0 {
		return &genproto.ValidationError{
			Key:     "PageSize",
			Message: fmt.Sprintf("must be greater than or equal to %d", 0),
		}
	}

	if x.GetPageSize() != 100 {
		return &genproto.ValidationError{
			Key:     "PageSize",
			Message: fmt.Sprintf("must be equal to %d", 100),
		}
	}

	return nil
}

func (x *QueryRequest) validateMatch() error {

	return x.Match.Validate()

	return nil
}

func (x *QueryMatch) Validate() error {

	if err := x.validateKey(); err != nil {
		return err
	}

	if err := x.validateValue(); err != nil {
		return err
	}

	return nil
}

func (x *QueryMatch) validateKey() error {

	if strings.TrimSpace(x.GetKey()) == "" {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: "can not be blank",
		}
	}

	if len(x.GetKey()) < 1 {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: fmt.Sprintf("must be at least %d characters long", 1),
		}
	}

	if len(x.GetKey()) > 1 {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: fmt.Sprintf("must be at most %d characters long", 1),
		}
	}

	notInList := []string{"name", "title", "content"}
	if genproto.StringIn(x.GetKey(), notInList) {
		return &genproto.ValidationError{
			Key:     "Key",
			Message: fmt.Sprintf("must not be one of %v", notInList),
		}
	}

	return nil
}

func (x *QueryMatch) validateValue() error {

	return nil
}

func (x *QueryResponse) Validate() error {

	if err := x.validateTotal(); err != nil {
		return err
	}

	if err := x.validateItems(); err != nil {
		return err
	}

	return nil
}

func (x *QueryResponse) validateTotal() error {

	return nil
}

func (x *QueryResponse) validateItems() error {

	return nil
}
