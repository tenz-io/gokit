package main

import (
	"github.com/tenz-io/gokit/ginext"
	"google.golang.org/protobuf/reflect/protoreflect"
	"net/http"
	"regexp"
	"strings"

	"github.com/tenz-io/gokit/genproto/go/custom/idl"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPkg         = protogen.GoImportPath("context")
	ginPkg             = protogen.GoImportPath("github.com/gin-gonic/gin")
	metadataPkg        = protogen.GoImportPath("github.com/tenz-io/gokit/ginext/metadata")
	ginextPkg          = protogen.GoImportPath("github.com/tenz-io/gokit/ginext")
	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

// generateFile generates a _gin.pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_gin.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by github.com/tenz-io/gokit/protoc-gen-go-gin. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the github.com/tenz-io/gokit/protoc-gen-go-gin package it is being compiled against.")
	g.P("// ", contextPkg.Ident(""), metadataPkg.Ident(""))
	g.P("// ", ginPkg.Ident(""), ginextPkg.Ident(""))
	g.P()

	for _, srv := range file.Services {
		genService(gen, file, g, srv)
	}
	return g
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &service{
		Name:     s.GoName,
		FullName: string(s.Desc.FullName()),
		FilePath: file.Desc.Path(),
	}

	for _, m := range s.Methods {
		sd.Methods = append(sd.Methods, genMethod(m)...)
	}
	g.P(sd.execute())
}

func genMethod(m *protogen.Method) []*method {
	var (
		methods []*method
	)

	methods = append(methods, buildHTTPRule(m))
	return methods
}

func msgFields(msgName string, msg *protogen.Message) []fieldData {
	var fields []fieldData
	for _, field := range msg.Fields {
		if field.Desc.Kind() == protoreflect.MessageKind {
			fields = append(fields, fieldData{
				MessageName: msgName,
				FieldName:   field.GoName,
				IsMessage:   true,
			})

			continue
		}

		options := proto.GetExtension(field.Desc.Options(), idl.E_Field)
		if options == nil {
			continue
		}
		fieldOpts, ok := options.(*idl.Field)
		if !ok {
			continue
		}

		fd := fieldData{
			MessageName: msgName,
			FieldName:   field.GoName,
			IsMessage:   false,
		}
		setFieldData(&fd, fieldOpts)
		fields = append(fields, fd)

	}

	return fields
}

func setFieldData(field *fieldData, fdOpt *idl.Field) {
	if fdOpt.GetBind() == nil {
		return
	}

	switch bind := fdOpt.GetBind().(type) {
	case *idl.Field_Uri:
		field.Uri = bind
		field.Bind = bind.Uri
	case *idl.Field_Query:
		field.Query = bind
		field.Bind = bind.Query
	case *idl.Field_Header:
		field.Header = bind
		field.Bind = bind.Header
	case *idl.Field_Form:
		field.Form = bind
		field.Bind = bind.Form
	case *idl.Field_File:
		field.File = bind
		field.Bind = bind.File
	default:
	}

}

// defaultMethodPath generates default path for method
// eg: GetBlogArticles ==> get: /blog/articles
// if method name contains http method, use it as prefix
func defaultMethod(m *protogen.Method) *method {
	names := strings.Split(toSnakeCase(m.GoName), "_")
	var (
		paths      []string
		httpMethod string
		path       string
	)

	switch strings.ToUpper(names[0]) {
	case http.MethodGet, "FIND", "QUERY", "LIST", "SEARCH":
		httpMethod = http.MethodGet
	case http.MethodPost, "CREATE":
		httpMethod = http.MethodPost
	case http.MethodPut, "UPDATE":
		httpMethod = http.MethodPut
	case http.MethodPatch:
		httpMethod = http.MethodPatch
	case http.MethodDelete:
		httpMethod = http.MethodDelete
	default:
		httpMethod = "POST"
		paths = names
	}

	if len(paths) > 0 {
		path = strings.Join(paths, "/")
	}

	if len(names) > 1 {
		path = strings.Join(names[1:], "/")
	}

	md := buildMethodDesc(m, httpMethod, path, idl.Method_ANONYMOUS, idl.Method_WEB)
	md.Body = "*"
	return md
}

func buildHTTPRule(m *protogen.Method) *method {
	options := proto.GetExtension(m.Desc.Options(), idl.E_Method)
	if options == nil {
		return defaultMethod(m)
	}
	methodOpts, ok := options.(*idl.Method)
	if !ok {
		return defaultMethod(m)
	}

	var (
		path       string
		httpMethod string
		role       = methodOpts.GetRole()
		authType   = methodOpts.GetType()
	)
	switch route := methodOpts.GetRoute().(type) {
	case *idl.Method_Get:
		path = route.Get
		httpMethod = "GET"
	case *idl.Method_Put:
		path = route.Put
		httpMethod = "PUT"
	case *idl.Method_Post:
		path = route.Post
		httpMethod = "POST"
	case *idl.Method_Delete:
		path = route.Delete
		httpMethod = "DELETE"
	case *idl.Method_Patch:
		path = route.Patch
		httpMethod = "PATCH"
	default:
		panic("unknown http method")
	}

	md := buildMethodDesc(m, httpMethod, path, role, authType)
	return md
}

func buildMethodDesc(m *protogen.Method, httpMethod, path string, role idl.Method_AuthRole, authType idl.Method_AuthType) *method {
	defer func() { methodSets[m.GoName]++ }()
	md := &method{
		Name:     m.GoName,
		Num:      methodSets[m.GoName],
		Request:  m.Input.GoIdent.GoName,
		Reply:    m.Output.GoIdent.GoName,
		Path:     path,
		Method:   httpMethod,
		Role:     toRoleType(role),
		AuthType: toAuthType(authType),
	}
	md.initPathParams()
	return md
}

var matchFirstCap = regexp.MustCompile("([A-Z])([A-Z][a-z])")
var matchAllCap = regexp.MustCompile("([a-z0-9])([A-Z])")

func toSnakeCase(input string) string {
	output := matchFirstCap.ReplaceAllString(input, "${1}_${2}")
	output = matchAllCap.ReplaceAllString(output, "${1}_${2}")
	output = strings.ReplaceAll(output, "-", "_")
	return strings.ToLower(output)
}

func toRoleType(roleType idl.Method_AuthRole) ginext.RoleType {
	switch roleType {
	case idl.Method_ANONYMOUS:
		return ginext.RoleAnonymous
	case idl.Method_ADMIN:
		return ginext.RoleAdmin
	case idl.Method_USER:
		return ginext.RoleUser
	default:
		panic("unknown role type")
	}
}

func toAuthType(authType idl.Method_AuthType) ginext.AuthType {
	switch authType {
	case idl.Method_WEB:
		return ginext.AuthTypeWeb
	case idl.Method_REST:
		return ginext.AuthTypeRest
	default:
		panic("unknown auth type")
	}
}
