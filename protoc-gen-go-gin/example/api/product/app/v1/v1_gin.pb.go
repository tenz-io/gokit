// Code generated by github.com/tenz-io/gokit/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	ginext "github.com/tenz-io/gokit/ginext"
	metadata "github.com/tenz-io/gokit/ginext/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/tenz-io/gokit/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
// gin.ginext.

type BlogServiceHTTPServer interface {
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleResp, error)

	GetArticles(context.Context, *GetArticlesReq) (*GetArticlesResp, error)

	GetImage(context.Context, *GetImageReq) (*GetImageResp, error)

	UploadImage(context.Context, *UploadImageReq) (*UploadImageResp, error)
}

func RegisterBlogServiceHTTPServer(r gin.IRouter, srv BlogServiceHTTPServer) {
	s := BlogService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type BlogService struct {
	server BlogServiceHTTPServer
	router gin.IRouter
}

func (s *BlogService) GetArticles_0(ctx *gin.Context) {
	var in GetArticlesReq
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	md := metadata.New(ctx)
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := s.server.(BlogServiceHTTPServer).GetArticles(newCtx, &in)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *BlogService) CreateArticle_0(ctx *gin.Context) {
	var in CreateArticleReq
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	md := metadata.New(ctx)
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := s.server.(BlogServiceHTTPServer).CreateArticle(newCtx, &in)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *BlogService) UploadImage_0(ctx *gin.Context) {
	var in UploadImageReq
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	md := metadata.New(ctx)
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := s.server.(BlogServiceHTTPServer).UploadImage(newCtx, &in)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *BlogService) GetImage_0(ctx *gin.Context) {
	var in GetImageReq
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	md := metadata.New(ctx)
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := s.server.(BlogServiceHTTPServer).GetImage(newCtx, &in)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *BlogService) RegisterService() {

	s.router.Handle("GET", "/v1/author/:author_id/articles", s.GetArticles_0)

	s.router.Handle("POST", "/v1/author/:author_id/articles", s.CreateArticle_0)

	s.router.Handle("POST", "/v1/images/:key", s.UploadImage_0)

	s.router.Handle("GET", "/v1/images/:key", s.GetImage_0)

}
