syntax = "proto3";

option go_package = "example/api/product/app/v1;v1";

package product.app.v1;

import "google/api/annotations.proto";
import "custom/common/authz.proto";

// blog service is a blog demo
service BlogService {
  rpc Login(LoginReq) returns (LoginResp) {
    option (google.api.http) = {
      post: "/login"
    };
    option (custom.common.auth) = {
      role: ANONYMOUS
      type: WEB
    };
  }

  rpc GetArticles(GetArticlesReq) returns (GetArticlesResp) {
    option (google.api.http) = {
      get: "/v1/author/{author_id}/articles"
    };
    option (custom.common.auth) = {
      role: USER
      type: REST
    };
  }

  rpc CreateArticle(CreateArticleReq) returns (CreateArticleResp) {
    option (google.api.http) = {
      post: "/v1/author/{author_id}/articles"
    };
    option (custom.common.auth) = {
      role: ADMIN
      type: WEB
    };
  }

  rpc UploadImage(UploadImageReq) returns (UploadImageResp) {
    option (google.api.http) = {
      post: "/v1/images/{key}"
    };
    option (custom.common.auth) = {
      role: ADMIN
      type: WEB
    };
  }

  rpc GetImage(GetImageReq) returns (GetImageResp) {
    option (google.api.http) = {
      get: "/v1/images/{key}"
    };
    option (custom.common.auth) = {
      role: USER
      type: REST
    };
  }
}

message LoginReq {
  // @inject_tag: bind:"form,name=username" validate:"required,non_blank,min_len=2,pattern=#abc123"
  string username = 2;
  // @inject_tag: bind:"form,name=password" validate:"required,non_blank,min_len=2"
  string password = 3;
}

message LoginResp {
  string token = 2;
}

message GetArticlesReq {
  // @inject_tag: bind:"uri,name=author_id" validate:"required,gt=0"
  int32 author_id = 1;

  // @inject_tag: bind:"query,name=title" validate:"max_len=200"
  string title = 2;

  // @inject_tag: bind:"query,name=page" validate:"gt=0" default:"1"
  int32 page = 3;

  // @inject_tag: bind:"query,name=page_size" validate:"gt=0,lte=100" default:"20"
  int32 page_size = 4;


}

message GetArticlesResp {
  int64 total = 1;
  repeated Article articles = 2;
}

message CreateArticleReq {
  // @inject_tag: bind:"uri,name=author_id" validate:"required,gt=0"
  int32 author_id = 1;
  // @inject_tag: bind:"header,name=Authorization" validate:"required"
  string authorization = 2;
  // @inject_tag: bind:"form,name=title" validate:"required,min_len=1,max_len=400"
  string title = 3;
  // @inject_tag: bind:"form,name=content" validate:"required,min_len=1,max_len=100000"
  string content = 4;
}

message CreateArticleResp {
  int32 article_id = 1;
  string title = 2;
  string content = 3;
}

message Article {
  int32 article_id = 1;
  int32 author_id = 2;
  string title = 3;
  string content = 4;
}

message UploadImageReq {
  // @inject_tag: bind:"uri,name=key" validate:"required,max_len=128,pattern=#abc123"
  string key = 1;
  // @inject_tag: bind:"query,name=region" validate:"required,non_blank,len=2,pattern=#abc" default:"sg"
  string region = 2;
  // @inject_tag: bind:"header,name=Authorization" validate:"required"
  string authorization = 3;
  // @inject_tag: bind:"file,name=image" validate:"min_len=1,max_len=102400"
  bytes image = 4;
  // @inject_tag: bind:"form,name=filename"
  string filename = 5;
}

message UploadImageResp {
  string key = 1;
}

message GetImageReq {
  // @inject_tag: bind:"uri,name=key" validate:"required,max_len=128,pattern=#abc123"
  string key = 1;
  // @inject_tag: bind:"query,name=region" validate:"required,non_blank,len=2,pattern=#abc" default:"sg"
  string region = 2;
}

message GetImageResp {
  bytes file = 1;
}