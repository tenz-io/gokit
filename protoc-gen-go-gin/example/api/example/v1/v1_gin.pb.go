// Code generated by github.com/tenz-io/gokit/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	ginext "github.com/tenz-io/gokit/ginext"
	metadata "github.com/tenz-io/gokit/ginext/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/tenz-io/gokit/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
// gin.ginext.

type ApiServerHTTPServer interface {
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)

	Hello(context.Context, *HelloRequest) (*HelloResponse, error)

	Login(context.Context, *LoginRequest) (*LoginResponse, error)

	Query(context.Context, *QueryRequest) (*QueryResponse, error)

	UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error)

	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
}

func RegisterApiServerHTTPServer(r gin.IRouter, srv ApiServerHTTPServer) {
	s := ApiServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type ApiServer struct {
	server ApiServerHTTPServer
	router gin.IRouter
}

func (s *ApiServer) Login_0(ctx *gin.Context) {
	var in LoginRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).Login(ctx, req.(*LoginRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.Login")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) Hello_0(ctx *gin.Context) {
	var in HelloRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).Hello(ctx, req.(*HelloRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.Hello")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) GetImage_0(ctx *gin.Context) {
	var in GetImageRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).GetImage(ctx, req.(*GetImageRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.GetImage")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) UploadImage_0(ctx *gin.Context) {
	var in UploadImageRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).UploadImage(ctx, req.(*UploadImageRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.UploadImage")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) UpdateProgress_0(ctx *gin.Context) {
	var in UpdateProgressRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.UpdateProgress")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) Query_0(ctx *gin.Context) {
	var in QueryRequest
	if err := ginext.BindAndValidate(ctx, &in); err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	var handler ginext.RpcHandler = func(ctx context.Context, req any) (resp any, err error) {
		return s.server.(ApiServerHTTPServer).Query(ctx, req.(*QueryRequest))
	}

	md := metadata.New(ctx, "ApiServerHTTPServer.Query")
	newCtx := metadata.WithMetadata(ctx.Request.Context(), md)
	out, err := ginext.AllRpcInterceptor.Intercept(newCtx, &in, handler)
	if err != nil {
		ginext.ErrorResponse(ctx, err)
		return
	}

	ginext.Response(ctx, out)
}

func (s *ApiServer) RegisterService() {

	s.router.Handle("POST", "/api/login", ginext.Authenticate(0, 0), s.Login_0)

	s.router.Handle("GET", "/api/hello", ginext.Authenticate(2, 1), s.Hello_0)

	s.router.Handle("GET", "/api/image/:key", ginext.Authenticate(2, 1), s.GetImage_0)

	s.router.Handle("POST", "/api/upload/image", ginext.Authenticate(2, 1), s.UploadImage_0)

	s.router.Handle("POST", "/api/update/progress", ginext.Authenticate(2, 1), s.UpdateProgress_0)

	s.router.Handle("POST", "/api/query", ginext.Authenticate(2, 1), s.Query_0)

}
